( clust <- OptK(x, 20, plot=TRUE, cluster=TRUE) )
clust$clusinfo
clust$clustering
load("/Volumes/GISDATA/FIA_Data_20012007/Pep_Janet/CalOr_PNWFIA/allvarsFIA.RData")
names(allvars.data)
load("/Volumes/GISDATA/FIA_Data_20012007/Pep_Janet/CalOr_PNWFIA/allvarsFIA.RData")
str(allvars.data)
load("/Volumes/GISDATA/FIA_Data_20012007/Pep_Janet/CalOr_PNWFIA/allvarsFIA.RData")
str(allvars.data)
load("/Volumes/GISDATA/FIA_Data_20012007/Pep_Janet/CalOr_PNWFIA/allvarsFIA.RData")
str(allvars.data)
q()
fat<-(rgamma(1000,shape=2))
bug<-rmultinom(1000,size=3,prob=c(1/3,1/3,1/3))
bc=0.5*fat + bug
lm(bc~fat+bug)
plot(bug)
plot(bc)
plot(bug,bc)
library(tidyr)
install.package("tidyr")
install.packages("tidyr")
library("tidyr")
library(nycflights13)
install.packages("nycflights13")
library(dplyr)
flights
library(nycflights13)
library(dplyr)
flights
filter(flights, dest == "IAH")
select(flights, year:day, carrier, tailnum)
select(flights, year:day, carrier, tailnum)
arrange(flights, desc(arr_delay))
arrange(flights, desc(arr_delay))
mutate(flights, speed = distance / air_time * 60)
flights
arrange(flights, desc(arr_delay))
by_day <- group_by(flights, year, month, day)
install.packages("browseVignettes")
library("ggvis")
install.packages("ggvis")
library("ggvis")
dat<-data.frame(x=c(1,2,3),y=c(10,20,30))
mtcars %>%
ggvis(x = ~wt, y = ~mpg) %>%
layer_points() %>%
layer_smooth()
mtcars %>%
ggvis(x = ~wt, y = ~mpg) %>%
layer_points() %>%
layer_smooths()
p <- ggvis(mtcars, x = ~wt, y= ~mpg)
p<- layer_points(p)
p<-layer_smooths(p)
p
dat<-data.frame(x = c(1,2,3),y = c(10,20,30))
dat %>% ggvis(x = ~x, y = ~y, fill = ~f ) %>%
layer_points()
dat<-data.frame(x = c(1,2,3),y = c(10,20,30), f=[1:30])
dat<-data.frame(x = c(1,2,3),y = c(10,20,30), f=c(1:30))
dat %>% ggvis(x = ~x, y = ~y, fill = ~f ) %>%
layer_points()
dat<-data.frame(x = seq(1,30),y = c(10,20,30), f=c(1:30))
dat %>% ggvis(x = ~x, y = ~y, fill = ~f ) %>%
layer_points()
dat<-data.frame(x = seq(1,30),y = rnorm(0,1), f=c(1:30))
dat<-data.frame(x = seq(1,30),y = rnorm(30,0,1), f=c(1:30))
dat %>% ggvis(x = ~x, y = ~y, fill = ~f ) %>%
layer_points()
install.packages("sparkTable")
library(sparkTable)
summaryST(by_day)
summaryST(dat)
6L), class = "data.frame"))
"Software Type"), SQL = structure("ClNFTEVDVCB0cm92ZV9jYXRfaWQsIGRlc2NyaXB0aW9uCkZST00gc2YwNTE0LnRyb3ZlX2Zyb250cGFnZQ==", class = "base64"), indicatorName = structure("c29mdHdhcmVUeXBl", class = "base64"), resultNames = structure("SUQsIFNvZnR3YXJlIFR5cGU=", class = "base64"), row.names = c(NA, 6L), class = "data.frame"), structure(list(`Project ID` = c("142", "129", "120", "119", "107", "106"), `User Community Size` = c("153237",6L), class = "data.frame"))
"psfl", "public", "publicdomain", "python", "qpl", "sissl", "sunpublic", "website", "wxwindows", "zlib", "zope"), class = "factor"), `License Restrictiveness` = structure(c(NA_integer_, NA_integer_, NA_integer_, NA_integer_, NA_integer_, NA_integer_), .Label = c("Highly Restrictive", "Permissive", "Restrictive", "Unknown"), class = "factor")), .Names = c("Project ID", "Project License", "License Restrictiveness"), SQL = structure("ClNFTEVDVCBncm91cF9pZCwgbGljZW5zZQpGUk9NIHNmMDUxNC5ncm91cHM=", class = "base64"), indicatorName = structure("cHJqTGljZW5zZQ==", class = "base64"), resultNames = structure("UHJvamVjdCBJRCwgUHJvamVjdCBMaWNlbnNl", class = "base64"), row.names = c(NA, 6L), class = "data.frame"), structure(list(`Project ID` = c("2", "3", "7", "11", "12", "14"), `Latest Release` = c("Snapshots", "7.5", "gedit 0.9.5", "r2-00", "0.9.7", "dhiggen_merge-5.0"), `Project Maturity` = structure(c(NA, 3L, 1L, 3L, 1L, 3L), .Label = c("Alpha/Beta", "Stable", "Mature"), class = "factor")), .Names = c("Project ID", "Latest Release", "Project Maturity"), SQL = structure("ClNFTEVDVCBmcC5ncm91cF9pZCwgTUFYKGZyLm5hbWUpCkZST00gc2YwNTE0LmZyc19wYWNrYWdlIGZwLCBzZjA1MTQuZnJzX3JlbGVhc2UgZnIsIHNmMDUxNC5mcnNfc3RhdHVzIGZzCldIRVJFIGZwLnBhY2thZ2VfaWQgPSBmci5wYWNrYWdlX2lkCkdST1VQIEJZIGZwLmdyb3VwX2lk", class = "base64"), indicatorName = structure("cHJqTWF0dXJpdHk=", class = "base64"), resultNames = structure("UHJvamVjdCBJRCwgTGF0ZXN0IFJlbGVhc2U=", class = "base64"), row.names = c(NA, 6L), class = "data.frame"), structure(list(`NA` = c("1660372", "1590394", "1590772", "85777", "1591062", "1591181"), `NA` = cames = c(NA_character_, NA_character_), SQL = structure("ClNFTEVDVCBncm91cF9pZCwgdXNlX3dpa2kKRlJPTSBzZjA1MTQuZ3JvdXBz", class = "base64"), indicatorName = structure("cHViUm9hZG1hcA==", class = "base64"), resultNames = structure("TkE=", class = "base64"), row.names = c(NA, 6L), class = "data.frame"), structure(list(ID = c("141", "66","55", "45", "75", "80"), `Software Type` = c("Clustering", "Database", "Desktop", "Development", "Financial", "Games")), .Names = c("ID", "Software Type"), SQL = structure("ClNFTEVDVCB0cm92ZV9jYXRfaWQsIGRlc2NyaXB0aW9uCkZST00gc2YwNTE0LnRyb3ZlX2Zyb250cGFnZQ==", class = "base64"), indicatorName = structure("c29mdHdhcmVUeXBl", class = "base64"), resultNames = structure("SUQsIFNvZnR3YXJlIFR5cGU=", class = "base64"), row.names = c(NA, 6L), class = "data.frame"), structure(list(`Project ID` = c("142", "129", "120", "119", "107", "106"), `User Community Size` = c("153237",6L), class = "data.frame"))
), SQL = structure("ClNFTEVDVCBncm91cF9pZCwgZW5hYmxlZCwgdXJsX3ByaW1hcnksIGluc3RydWN0aW9uc19wdWJsaWMKRlJPTSBzZjA1MTQuZXh0ZXJuYWxfdG9vbF9saW5rcw==", class = "base64"), indicatorName = structure("ZGV2TGlua3M=", class = "base64"), resultNames = structure("UHJvamVjdCBJRCwgRW5hYmxlZCwgUmVwbyBVUkwsIFJlcG8gSW5zdHJ1Y3Rpb25z", class = "base64"), row.names = c(NA,
), SQL = structure("ClNFTEVDVCBncm91cF9pZCwgZW5hYmxlZCwgdXJsX3ByaW1hcnksIGluc3RydWN0aW9uc19wdWJsaWMKRlJPTSBzZjA1MTQuZXh0ZXJuYWxfdG9vbF9saW5rcw==", class = "base64"), indicatorName = structure("ZGV2TGlua3M=", class = "base64"), resultNames = structure("UHJvamVjdCBJRCwgRW5hYmxlZCwgUmVwbyBVUkwsIFJlcG8gSW5zdHJ1Y3Rpb25z", class = "base64"), row.names = c(NA, 6L), class = "data.frame"), structure(list(`NA` = c("1343228",
), SQL = structure("ClNFTEVDVCBncm91cF9pZCwgZW5hYmxlZCwgdXJsX3ByaW1hcnksIGluc3RydWN0aW9uc19wdWJsaWMKRlJPTSBzZjA1MTQuZXh0ZXJuYWxfdG9vbF9saW5rcw==", class = "base64"), indicatorName = structure("ZGV2TGlua3M=", class = "base64"), resultNames = structure("UHJvamVjdCBJRCwgRW5hYmxlZCwgUmVwbyBVUkwsIFJlcG8gSW5zdHJ1Y3Rpb25z", class = "base64"), row.names = c(NA, 6L), class = "data.frame"), structure(list(`NA` = c("1343228", "230959", "1938195", "1883362", "404683", "650286"), `NA` = c("6",
), SQL = structure("ClNFTEVDVCBncm91cF9pZCwgZW5hYmxlZCwgdXJsX3ByaW1hcnksIGluc3RydWN0aW9uc19wdWJsaWMKRlJPTSBzZjA1MTQuZXh0ZXJuYWxfdG9vbF9saW5rcw==", class = "base64"), indicatorName = structure("ZGV2TGlua3M=", class = "base64"), resultNames = structure("UHJvamVjdCBJRCwgRW5hYmxlZCwgUmVwbyBVUkwsIFJlcG8gSW5zdHJ1Y3Rpb25z", class = "base64"), row.names = c(NA, 6L), class = "data.frame"), structure(list(`NA` = c("1343228", "230959", "1938195", "1883362", "404683", "650286"), `NA` = c("6", "6", "6", "6", "6", "6"), `NA` = c("http://sourceforge.net/p/aprpg/discussion",
), .Names = c(NA_character_, NA_character_, NA_character_), SQL = structure("ClNFTEVDVCBncm91cF9pZCwgcHJlZmVycmVkX3N1cHBvcnRfdHlwZSwgcHJlZmVycmVkX3N1cHBvcnRfcmVzb3VyY2UKRlJPTSBzZjA1MTQuZ3JvdXBzCldIRVJFIHByZWZlcnJlZF9zdXBwb3J0X3R5cGUgPSA2", class = "base64"), indicatorName = structure("ZGV2U3VwcG9ydA==", class = "base64"), resultNames = structure("TkE=", class = "base64"), row.names = c(NA,
), .Names = c(NA_character_, NA_character_, NA_character_), SQL = structure("ClNFTEVDVCBncm91cF9pZCwgcHJlZmVycmVkX3N1cHBvcnRfdHlwZSwgcHJlZmVycmVkX3N1cHBvcnRfcmVzb3VyY2UKRlJPTSBzZjA1MTQuZ3JvdXBzCldIRVJFIHByZWZlcnJlZF9zdXBwb3J0X3R5cGUgPSA2", class = "base64"), indicatorName = structure("ZGV2U3VwcG9ydA==", class = "base64"), resultNames = structure("TkE=", class = "base64"), row.names = c(NA, 6L), class = "data.frame"), structure(list(`Project ID` = c("1692507",
library(knitr)
install.packages("stringr")
install.packages("lubridate")
remove.packages("reshape")
datasets()
library(datasets)
log(0)
log(1)
log(2)
log(10)
log(3)
exp(1)
exp(0)
exp(2)
exp(4)
exp(3)
install.packages("lavaan")
library(devtools)
devtools::install_github("google/CausalImpact")
library(CausalImpact)
devtools::install_github("google/CausalImpact")
library("xts", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
detach("package:xts", unload=TRUE)
remove.packages("xts")
install.packages("xts")
library("xts", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
detach("package:xts", unload=TRUE)
u <- 1 + (e <- 4e-13/9)
rbind(`u-1` = u - 1, e)
?log1p()
x <- 10^-(1+2*1:9)
cbind(x, log(1+x), log1p(x), exp(x)-1, expm1(x))
log1mexp()
?log1mexp()
?cospi()
cos(pi/2)
cospi(1/2)
curve(-log(1 - exp(-x)), 0, 10)
?&&
?&
y <- 1 + (x <- stats::rpois(50, lambda = 1.5) / 4 - 1)
x[(x > 0) & (x < 1)]    # all x values between 0 and 1
if (any(x == 0) || any(y == 0)) "zero encountered"
log(.000000000000005 + 1)
log1p(.000000000000005)
log1p(.000000000000005 + 1)
log(.000000000000005 + 2)
install.packages("openMX")
install.packages("sesem")
install.packages(c("caTools", "geoR", "geosphere", "Hmisc", "htmltools", "KernSmooth", "Lahman", "leafletR", "ngspatial", "RGraphics", "spam", "xtable"))
stems <- read.csv("data/stems.csv")
setwd("~/GitHub/superspreaders/analysis")
stems <- read.csv("data/stems.csv")
summary(stems)
stems[stems == -9999] <- NA
library(plyr)
library(dplyr)
library(tidyr)
library(ggplot2)
summary(stems)
umca <- stems %>%
select(plot, cluster, tag, species, status, slc, canker, dbh, year) %>%
filter(species = "UMCA")
umca <- stems %>%
select(plot, cluster, tag, species, status, slc, canker, dbh, year) %>%
filter(species == "UMCA")
summary(umca)
class(umca)
umca <- as.tbl(stems) %>%
select(plot, cluster, tag, species, status, slc, canker, dbh, year) %>%
filter(species == "UMCA")
summary(umca)
umca
umca <- as.tbl(stems) %>%
select(plot, cluster, tag, species, status, slc, dbh, year) %>%
filter(species == "UMCA")
umca
umca %>%
select(plot, cluster, tag, slc, year) %>%
group_by(plot, year) %>%
summarise(avg_slc = mean(slc))
umca %>%
select(plot, cluster, tag, slc, year) %>%
group_by(plot, year) %>%
filter(slc >= 0)
umca %>%
select(plot, cluster, tag, slc, year) %>%
group_by(plot, year) %>%
filter(slc >= 0) %>%
summarise(avg_slc = mean(slc, ))
left_join(umca, umca %>%
select(plot, cluster, tag, slc, year) %>%
group_by(plot, year) %>%
filter(slc >= 0) %>%
summarise(avg_slc = mean(slc), by = "tag")
###Linear Mixed Effects Method ####
library(nlme)
left_join(umca, umca %>%
select(plot, cluster, tag, slc, year) %>%
group_by(plot, year) %>%
filter(slc >= 0) %>%
summarise(avg_slc = mean(slc)), by = "tag")
left_join(umca, umca %>%
select(plot, cluster, tag, slc, year) %>%
group_by(plot, year) %>%
filter(slc >= 0) %>%
summarise(avg_slc = mean(slc)), by = "plot")
left_join(umca, umca %>%
select(plot, cluster, tag, slc, year) %>%
group_by(plot, year) %>%
filter(slc >= 0) %>%
summarise(avg_slc = mean(slc)), by = "plot, year")
left_join(umca, umca %>%
select(plot, cluster, tag, slc, year) %>%
group_by(plot, year) %>%
filter(slc >= 0) %>%
summarise(avg_slc = mean(slc)), by = c("plot", "year"))
umca <- left_join(umca, umca %>%
select(plot, cluster, tag, slc, year) %>%
group_by(plot, year) %>%
filter(slc >= 0) %>%
summarise(avg_slc = mean(slc)), by = c("plot", "year"))
umca
umca <- as.tbl(stems) %>%
select(plot, cluster, tag, species, status, slc, dbh, year) %>%
filter(species == "UMCA")
umca <- left_join(umca, umca %>%
select(plot, cluster, tag, slc, year) %>%
group_by(plot, year) %>%
filter(slc >= 0) %>%
summarise(avg_slc = mean(slc), tot_slc = sum(slc)), by = c("plot", "year"))
umca
summary(umca)
left_join(umca, umca %>%
select(plot, cluster, tag, slc, year) %>%
group_by(plot, year) %>%
filter(slc >= 0, status == "Alive") %>%
summarise(avg_slc = mean(slc), tot_slc = sum(slc),
bay_density = sum(as.factor(tag))),
by = c("plot", "year"))
left_join(umca, umca %>%
select(plot, cluster, tag, status, slc, year) %>%
group_by(plot, year) %>%
filter(slc >= 0, status == "Alive") %>%
summarise(avg_slc = mean(slc), tot_slc = sum(slc),
bay_density = sum(as.factor(tag))),
by = c("plot", "year"))
left_join(umca, umca %>%
select(plot, cluster, tag, status, slc, year) %>%
group_by(plot, year) %>%
filter(slc >= 0, status == "Alive") %>%
summarise(avg_slc = mean(slc), tot_slc = sum(slc),
bay_density = count(as.factor(tag))),
by = c("plot", "year"))
left_join(umca, umca %>%
select(plot, cluster, tag, status, slc, year) %>%
group_by(plot, year) %>%
filter(slc >= 0, status == "Alive") %>%
summarise(avg_slc = mean(slc), tot_slc = sum(slc),
bay_density = count(tag)),
by = c("plot", "year"))
umca %>%
select(plot, cluster, tag, status, slc, year) %>%
group_by(plot, year) %>%
filter(slc >= 0, status == "Alive")
umca %>%
select(plot, cluster, tag, status, slc, year) %>%
group_by(plot, year) %>%
filter(slc >= 0, status == "Alive") %>%
summarise(avg_slc = mean(slc), tot_slc = sum(slc),
bay_density = count(tag))
umca %>%
select(plot, cluster, tag, status, slc, year) %>%
group_by(plot, year) %>%
filter(slc >= 0, status == "Alive") %>%
summarise(avg_slc = mean(slc), tot_slc = sum(slc), bay_dens = len(tag))
umca %>%
select(plot, cluster, tag, status, slc, year) %>%
group_by(plot, year) %>%
filter(slc >= 0, status == "Alive") %>%
summarise(avg_slc = mean(slc), tot_slc = sum(slc), bay_dens = length(tag))
left_join(umca, umca %>%
select(plot, cluster, tag, status, slc, year) %>%
group_by(plot, year) %>%
filter(slc >= 0, status == "Alive") %>%
summarise(avg_slc = mean(slc), tot_slc = sum(slc),
live_dens = length(tag)),
by = c("plot", "year"))
umca <- as.tbl(stems) %>%
select(plot, cluster, tag, species, status, slc, dbh, year) %>%
filter(species == "UMCA")
umca <- left_join(umca, umca %>%
select(plot, cluster, tag, status, slc, year) %>%
group_by(plot, year) %>%
filter(slc >= 0, status == "Alive") %>%
summarise(avg_slc = mean(slc), tot_slc = sum(slc),
live_dens = length(tag)),
by = c("plot", "year"))
summary(umca)
is.na(umca)
is.na(umca)==T
summary(umca)
m1 <- lme(slc ~ 1 + (1 | year))
library(nlme)
m1 <- lme(slc ~ 1 + (1 | year))
m1 <- lme(slc ~ 1 + (1 | year), data = umca %>% group_by(plot, year))
m1 <- lme(slc ~ 1 + (1 | year), data = umca %>% group_by(plot, year) %>% filter(status == "Alive"))
umca %>% group_by(plot, year) %>% filter(status == "Alive")
umca <- left_join(umca, plot_umca <- umca %>%
select(plot, cluster, tag, status, slc, year) %>%
group_by(plot, year) %>%
filter(slc >= 0, status == "Alive") %>%
summarise(avg_slc = mean(slc), tot_slc = sum(slc),
live_dens = length(tag)),
by = c("plot", "year"))
plot_umca
m0 <- lme(tot_slc ~ 1 + (1 | year), data = plot_umca)
m0 <- lme(tot_slc ~ 1 , data = plot_umca, random = ~ year )
m0 <- lme(tot_slc ~ year , data = plot_umca)
m0 <- lme(tot_slc ~ 1 , data = plot_umca, ~year)
lme(distance ~ age, data = Orthodont)
m0 <- lme(tot_slc ~ year , data = plot_umca)
View(plot_umca)
m1 <- lme(tot_slc ~ live_dens, data = plot_umca)
Orthodont
m1 <- lme(tot_slc ~ live_dens | year, data = plot_umca)
head(Loblolly)
detach("package:nlme", unload=TRUE)
library(lme4)
m0 <- lmer(tot_slc ~ 1 + (1 | year), data = plot_umca)
View(plot_umca)
m1 <- lmer(tot_slc ~ live_dens + (1 | year), data = plot_umca)
anova(m0, m1)
m2 <- update(m1, . ~ . + (live_dens | year), .)
summary(m2)
m2 <- update(m1, . ~ . + (live_dens | year) -., .)
m2
m2 <- update(m1, . ~ . -. + (live_dens | year), .)
m2
m2 <- lmer(tot_slc ~ live_dens + (live_dens | year), data = plot_umca)
m2
anova(m0, m1, m2)
m1 <- update(m1, log1p(.) ~ log1p(.))
m1 <- update(m1, log1p(.) ~ log1p(.) + ., .)
m1 <- update(m1, log1p(.) ~ log1p(.) ., .)
m1 <- update(m1, log1p(.) ~ log1p(.) + . , .)
m1 <- update(m1, log1p(.) ~ log1p(.), .)
m1 <- update(m1, log1p(.) ~ log1p(.), . , .)
m1 <- update(m1, log1p(.) ~ log1p(.) + (1 | year) , .)
update(m1, log1p(.) ~ log1p(.), .)
update(m1, log1p(.) ~ ., .)
m0 <- lmer(tot_slc ~ 1 + (1 | year), data = plot_umca)
m1 <- lmer(tot_slc ~ live_dens + (1 | year), data = plot_umca)
m2 <- lmer(tot_slc ~ live_dens + (live_dens | year), data = plot_umca)
anova(m0, m1, m2)
pairs(plot_umca)
hist(plot_umca)
cor(plot_umca)
m0 <- lmer(log1p(tot_slc) ~ 1 + (1 | year), data = plot_umca)
m1 <- lmer(log1p(tot_slc) ~ log1p(live_dens) + (1 | year), data = plot_umca)
m1 <- lmer(log1p(tot_slc) ~ log1p(live_dens) + (live_dens | year), data = plot_umca)
anova(m0, m1, m3)
m0 <- lmer(log1p(tot_slc) ~ 1 + (1 | year), data = plot_umca)
m1 <- lmer(log1p(tot_slc) ~ log1p(live_dens) + (1 | year), data = plot_umca)
m2 <- lmer(log1p(tot_slc) ~ log1p(live_dens) + (live_dens | year), data = plot_umca)
anova(m0, m1, m2)
plot(m2)
m2
anova(m1, m2)
anova(m0, m2)
predict(m1)
plot(predict(m1), predict(m2))
lm(predict(m1) ~ predict(m2))
par(mfrow=c(1,2))
plot(predict(m1))
plot(predict(m2)))
plot(predict(m2))
plot(predict(m1), m1)
plot(predict(m1), predict(m2))
abline(lm(predict(m1) ~ predict(m2)))
abline(lm(predict(m1) ~ predict(m2)), color = red)
abline(lm(predict(m1) ~ predict(m2)), color = "red")
abline(lm(predict(m1) ~ predict(m2)), col = "red")
summary(lm(predict(m1) ~ predict(m2)))
summary(stems)
stems  %>% filter(tag == 3775)
stems <- read.csv("data/Stem_Summary_Query.txt")
head(stems)
str(stems)
all_stems <- read.csv("data/Stem_Summary_Query.txt")
rm(stems)
library(lubridate)
stems$Date <- as.character(stems$Date)
rm(all_stems)
stems <- read.csv("data/Stem_Summary_Query.txt")
stems$Date <- as.character(stems$Date)
class(stems$Date)
stems$year <- gsub("/", "-",stems$Date)
stems$date <- stems$year
stems$year <- year(stems$date)
class(stems$Date)
stems$year <- gsub("/", "-",stems$Date)
stems$date <- stems$year
stems$year <- year(stems$date)
stems$Date <- as.character(stems$Date)
head(stems)
stems <- read.csv("data/Stem_Summary_Query.txt")
head(stems)
str(stems)
stems$Date <- as.character(stems$Date)
stems$date <- gsub("/", "-",stems$Date)
library(lubridate)
stems$year <- year(stems$date)
head(stems)
stems$date <- dmy_hms(stems$date)
head(stems)
stems$year <- year(stems$date)
head(stems)
library(plyr)
library(dplyr)
library(tidyr)
stems <- rename(stems, c("PlotID" = "plot", "Date" = "old_date"))
stems <- rename(stems, c("ClusterID" = "cluster", "TagNumber" = "tag",
"SpeciesID" = "species", "StemStatus" = "status",
"AliveClass" = "alive_class",
"DeadClass" = "dead_class", "SympLeafCount" = "slc",
"CankerPresent" = "canker", "DBH" = "dbh",
"LideFoliarSymp" = "lide_lf_symp",
"SOD_Dead" = "sod_dead", "Location" = "location"))
str(stems)
write.csv(stems,"data/all_stems.csv")
stems <- read.csv("data/all_stems.csv")
stems[stems == -9999] <- NA
library(ggplot2)
umca <- as.tbl(stems) %>%
select(plot, cluster, tag, species, status, slc, dbh, year) %>%
filter(species == "UMCA")
umca
umca <- left_join(umca, plot_umca <- umca %>%
select(plot, cluster, tag, status, slc, year) %>%
group_by(plot, year) %>%
filter(slc >= 0, status == "Alive") %>%
summarise(avg_slc = mean(slc), tot_slc = sum(slc),
live_dens = length(tag)),
by = c("plot", "year"))
plot_umca
umca
anova(m0, m1, m2)
plot(predict(m1), predict(m2))
abline(lm(predict(m1) ~ predict(m2)), col = "red")
par(mfrow=c(3,1))
plot(predict(m1), predict(m2))
abline(lm(predict(m1) ~ predict(m2)), col = "red")
plot(predict(m0), predict(m1))
abline(lm(predict(m0) ~ predict(m1)), col - "red")
plot(predict(m0), predict(m2))
abline(lm(predict(m0) ~ predict(m2)), col - "red")
par(mfrow=c(1,3))
plot(predict(m1), predict(m2))
abline(lm(predict(m1) ~ predict(m2)), col = "red")
plot(predict(m0), predict(m1))
abline(lm(predict(m0) ~ predict(m1)), col - "red")
plot(predict(m0), predict(m2))
abline(lm(predict(m0) ~ predict(m2)), col - "red")
summary(lm(predict(m0) ~ predict(m2)))
anova(m0, m1)
plot_umca
length(unique(plot_umca$plot))
m0
summary(m0)
summary(m1)
m2 <- lmer(log1p(tot_slc) ~ log1p(live_dens) + (log1p(live_dens) | year), data = plot_umca)
anova(m0, m1, m2)
summary(lm(predict(m1) ~ predict(m2)))
anova(m0, m1)
anova(m0, m2)
anova(m1, m2)
m2 <- lmer(log1p(tot_slc) ~ log1p(live_dens) + (1 + log1p(live_dens) | year), data = plot_umca)
anova(m0, m1, m2)
m2 <- lmer(log1p(tot_slc) ~ log1p(live_dens) + (log1p(live_dens) | year), data = plot_umca)
anova(m0, m1, m2)
anova(m1, m2)
coef(m1)
coef(m2)
m2 <- lmer(log1p(tot_slc) ~ log1p(live_dens) + (log1p(live_dens) | year), data = plot_umca)
anova(m1, m2)
m1 <- lmer(log1p(tot_slc) ~ log1p(live_dens) + (1 | year), data = plot_umca)
anova(m0, m1, m2)
anova(m1, m2)
coef(m1)
coef(m2)
plot(coef(m1))
residuals.merMod(m1)
residuals(m1)
plot(residuals(m1))
plot(residuals(m2))
plot(predict(m1), predict(m2))
abline(lm(predict(m1) ~ predict(m2)), col = "red")
summary(lm(predict(m1) ~ predict(m2)))
sigma(m2)
sigma(m1)
simulate(m1)
plot(simulate(m1), simulate(m2))
xyplot(m1)
xyplot(profile(m1))
?xyplot
example("profile.merMod")
xyplot(profile(m1))
xyplot(profile(m2))
densityplot(profile(m2))
xyplot(profile(m1), conf = c(50, 90, 95, 99)/100)
plot(coef(m1))
densityplot(profile(m1))
splom(profile(m1), conf = c(50, 90, 95, 99)/100)
coef(m1)
coef(m2) # vayring intercept, varying slope
confint(m2)
confint(m1)
confing(m0)
confint(m0)
sigma(m0)
sigma(m1)
sigma(m2)
anova(m0, m1, m2)
anova(m1, m2)
coef(m1) # varying intercept
coef(m2) # vayring intercept, varying slope
coef(m0) # null model
coef(m1) # varying intercept
